name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  APP_NAME: fastapi-app
  ENV_NAME: prod
  SVC_NAME: fastapi-svc

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::885812045782:role/awscopilot-oidc
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        id: login-ecr
      
      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          aws ecr describe-repositories --repository-names ${{ env.APP_NAME }} || \
          aws ecr create-repository --repository-name ${{ env.APP_NAME }}
          
          docker build -t $ECR_REGISTRY/${{ env.APP_NAME }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.APP_NAME }}:$IMAGE_TAG
          docker tag $ECR_REGISTRY/${{ env.APP_NAME }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.APP_NAME }}:latest
          docker push $ECR_REGISTRY/${{ env.APP_NAME }}:latest
      
      - name: Install AWS Copilot CLI
        run: |
          curl -Lo copilot https://github.com/aws/copilot-cli/releases/latest/download/copilot-linux
          chmod +x copilot
          sudo mv copilot /usr/local/bin/copilot
      
      - name: Setup and deploy with Copilot
        run: |
          # Create the application if it doesn't exist
          if ! copilot app ls | grep -q "${APP_NAME}"; then
            copilot app init "${APP_NAME}" --domain ""
          fi

          # Create environment if it doesn't exist
          if ! copilot env ls --app "${APP_NAME}" | grep -q "${ENV_NAME}"; then
            copilot env init --name "${ENV_NAME}" --app "${APP_NAME}" --region "${AWS_REGION}" --default-config
            copilot env deploy --name "${ENV_NAME}" --app "${APP_NAME}"
          fi

          # Deploy the service
          copilot svc deploy --name "${SVC_NAME}" --env "${ENV_NAME}" --tag "${GITHUB_SHA}"
      
      - name: Show service URL
        if: success()
        run: |
          echo "Service deployed successfully! Endpoint URL:"
          copilot svc show --name "${SVC_NAME}" --app "${APP_NAME}" --env "${ENV_NAME}" --json | jq -r '.routes[0].url'
